export const articles = [
    {
        id: 1,
        title: "Начало работы с React | Getting Started with React",
        author: "Иван Иванов | Ivan Ivanov",
        date: "15 апреля 2025 | April 15, 2025",
        imageUrl: "/1.png",
        excerpt: "Узнайте, как начать разработку с использованием библиотеки React и создать свое первое приложение.",
        content: [
            "React — это JavaScript-библиотека для создания пользовательских интерфейсов. Она была разработана Facebook и используется многими крупными компаниями для создания современных веб-приложений.",
            "React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.",
            "Для начала работы с React вам потребуется установить Node.js и npm. После этого вы можете создать новое приложение с помощью команды 'npx create-react-app my-app'.",
            "To get started with React, you'll need to install Node.js and npm. After that, you can create a new application using the command 'npx create-react-app my-app'.",
            "React использует компонентный подход, который позволяет создавать переиспользуемые части интерфейса. Каждый компонент имеет свое состояние и свойства, которые определяют его поведение и внешний вид.",
            "React uses a component-based approach that allows you to create reusable UI elements. Each component has its own state and properties that define its behavior and appearance.",
            "В этой статье мы рассмотрим основные концепции React, такие как компоненты, состояние, свойства и жизненный цикл компонентов. Мы также создадим простое приложение для демонстрации этих концепций на практике.",
            "In this article, we'll explore the core concepts of React, such as components, state, props, and component lifecycle. We'll also create a simple application to demonstrate these concepts in practice.",
        ],
    },
    {
        id: 2,
        title: "Маршрутизация в React | Routing in React",
        author: "Мария Петрова | Maria Petrova",
        date: "10 апреля 2025 | April 10, 2025",
        imageUrl: "/2.png",
        excerpt:
            "Изучите основы маршрутизации с использованием библиотеки react-router-dom для создания многостраничных приложений.",
        content: [
            "Маршрутизация — это важная часть любого веб-приложения. Она позволяет создавать многостраничные приложения с разными URL-адресами для разных страниц.",
            "Routing is an essential part of any web application. It allows you to create multi-page applications with different URL addresses for different pages.",
            "React Router — это стандартная библиотека для маршрутизации в React. Она позволяет создавать навигацию между различными компонентами вашего приложения, сохраняя при этом синхронизацию URL в адресной строке браузера.",
            "React Router is the standard routing library for React. It enables navigation between different components of your application while keeping the URL in the browser's address bar in sync.",
            "В этой статье мы рассмотрим основные компоненты React Router, такие как BrowserRouter, Routes, Route, Link и NavLink. Мы также изучим, как передавать параметры через URL и как создавать вложенные маршруты.",
            "In this article, we'll explore the main components of React Router, such as BrowserRouter, Routes, Route, Link, and NavLink. We'll also learn how to pass parameters through the URL and how to create nested routes.",
            "Для установки React Router вы можете использовать npm или yarn: 'npm install react-router-dom' или 'yarn add react-router-dom'.",
            "To install React Router, you can use npm or yarn: 'npm install react-router-dom' or 'yarn add react-router-dom'.",
            "После установки вы можете импортировать необходимые компоненты и начать использовать их в своем приложении. Например, вы можете обернуть все приложение в компонент BrowserRouter и определить маршруты с помощью компонентов Routes и Route.",
            "After installation, you can import the necessary components and start using them in your application. For example, you can wrap your entire application in a BrowserRouter component and define routes using Routes and Route components.",
        ],
    },
    {
        id: 3,
        title: "Управление состоянием в React | State Management in React",
        author: "Алексей Смирнов | Alexey Smirnov",
        date: "5 апреля 2025 | April 5, 2025",
        imageUrl: "/3.jpeg",
        excerpt:
            "Узнайте о различных способах управления состоянием в React-приложениях, от встроенного useState до Redux.",
        content: [
            "Управление состоянием — это одна из самых важных задач при разработке React-приложений. Состояние определяет, как компоненты отображаются и взаимодействуют с пользователем.",
            "State management is one of the most important tasks when developing React applications. The state determines how components are displayed and interact with the user.",
            "React предоставляет встроенные хуки для управления состоянием, такие как useState и useReducer. Эти хуки позволяют компонентам хранить и обновлять свое состояние.",
            "React provides built-in hooks for state management, such as useState and useReducer. These hooks allow components to store and update their state.",
            "Для небольших приложений встроенных хуков обычно достаточно. Однако для более сложных приложений может потребоваться глобальное управление состоянием с использованием библиотек, таких как Redux, MobX или Recoil.",
            "For small applications, built-in hooks are usually sufficient. However, for more complex applications, global state management may be required using libraries such as Redux, MobX, or Recoil.",
            "В этой статье мы рассмотрим различные подходы к управлению состоянием в React, их преимущества и недостатки, а также примеры использования каждого подхода.",
            "In this article, we'll explore different approaches to state management in React, their advantages and disadvantages, and examples of using each approach.",
        ],
    },
]
